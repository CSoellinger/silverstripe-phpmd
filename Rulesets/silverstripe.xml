<?xml version="1.0"?>

<ruleset name="SilverStripe Rules"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Rules specific to SilverStripe conventions</description>

    <rule name="ClassName"
          since="0.2"
          message="The class {0} is not named correctly for the file {1}."
          class="SilverStripe\PHPMD\Rule\ClassNaming"
          externalInfoUrl="#">
        <description>
            <![CDATA[
SilverStripe classes must start with the same name as the file they are in, followed optionally by an underscore and
camel-cased append
            ]]>
        </description>
        <priority>1</priority>
        <properties/>
    </rule>

    <rule name="CamelCaseInstancePropertyName"
          since="0.2"
          message="The instance property {0} is not named in camelCase."
          class="SilverStripe\PHPMD\Rule\CamelCaseInstancePropertyName"
          externalInfoUrl="#">
        <description>
            <![CDATA[
It is considered best practice to use the camelCase notation to instance name attributes.
            ]]>
        </description>
        <priority>1</priority>
        <properties/>
        <example>
            <![CDATA[
class ClassName {
    protected $property_name;
}
            ]]>
        </example>
    </rule>

    <rule name="UnusedInstancePrivateField"
          since="0.2"
          message="Avoid unused private instance fields such as '{0}'."
          class="SilverStripe\PHPMD\Rule\UnusedInstancePrivateField"
          externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedprivatefield">
        <description>
Detects when a private instance field is declared and/or assigned a value, but not used. 
Ignores unused private statics, which are a design feature in SilverStripe.
        </description>
        <priority>3</priority>
        <example>
<![CDATA[
class Something
{
    private $i = 5; // Unused
    private $j = 6;
    public function addOne()
    {
        return $this->j++;
    }
}
]]>
        </example>
    </rule>

</ruleset>