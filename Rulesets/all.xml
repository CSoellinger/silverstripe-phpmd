<?xml version="1.0"?>
<ruleset name="SilverStripe full rule set"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                     http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="
                     http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>
Extended mess detection rules from phpmd for SilverStripe (http://silverstripe.org) applications.
The rules make it easier for developers to comply with the
SilverStripe Coding Conventions (http://docs.silverstripe.org/en/3.3/getting_started/coding_conventions/).
It uses mostly standard PHPMD rules, with a few notable changes:

 * Replaced `UnusedPrivateField` with `UnusedInstancePrivateField` rule, to check to instance fields only.
   Unused private statics are by design in SilverStripe.
 * Replaced `CamelCasePropertyName` with `CamelCaseInstancePropertyName` rule.
   Static properties in SilverStripe are snake cased.
 * Removed inflexible checks around camelCase naming conventions
    </description>

    <rule ref="rulesets/cleancode.xml">
        <exclude name="ElseExpression" />
        <!-- Static access is a "feature" in SilverStripe -->
        <exclude name="StaticAccess" />
    </rule>

    <rule ref="rulesets/codesize.xml">
    </rule>

    <rule ref="rulesets/controversial.xml">
        <!-- Currently commented out until it can handle template accessors -->
        <exclude name="CamelCaseMethodName" />
        <!-- Currently commented out until it can distinguish static property access through PDepend\Source\AST\ASTPropertyPostfix -->
        <exclude name="CamelCaseVariableName" />
        <!-- Replaced with CamelCaseInstancePropertyName -->
        <exclude name="CamelCasePropertyName" />
    </rule>

    <rule ref="rulesets/design.xml">
    </rule>

    <rule ref="rulesets/naming.xml">
        <!--  -->
        <exclude name="MethodNamingConventions" />
        <!-- While namespacing support exists, its not widespread enough to enforce -->
        <exclude name="NoPackage" />
        <!-- Customised below -->
        <exclude name="ShortVariable" />
    </rule>

    <rule ref="rulesets/naming.xml/ShortVariable">
        <properties>
            <property name="exceptions" description="Comma-separated list of exceptions" value="db,id,i"/>
        </properties>
    </rule>
    
    <rule ref="rulesets/unusedcode.xml">
        <!-- Replaced with UnusedInstancePrivateField rule -->
        <exclude name="UnusedPrivateField" />
    </rule>

    <rule name="ClassName"
          since="0.2"
          message="The class {0} is not named correctly for the file {1}."
          class="SilverStripe\PHPMD\Rule\ClassNaming"
          externalInfoUrl="#">
        <description>
            <![CDATA[
SilverStripe classes must start with the same name as the file they are in, followed optionally by an underscore and
camel-cased append
            ]]>
        </description>
        <priority>1</priority>
        <properties/>
    </rule>

    <rule name="CamelCaseInstancePropertyName"
          since="0.2"
          message="The instance property {0} is not named in camelCase."
          class="SilverStripe\PHPMD\Rule\CamelCaseInstancePropertyName"
          externalInfoUrl="#">
        <description>
            <![CDATA[
It is considered best practice to use the camelCase notation to instance name attributes.
            ]]>
        </description>
        <priority>1</priority>
        <properties/>
        <example>
            <![CDATA[
class ClassName {
    protected $property_name;
}
            ]]>
        </example>
    </rule>

    <rule name="UnusedInstancePrivateField"
          since="0.2"
          message="Avoid unused private instance fields such as '{0}'."
          class="SilverStripe\PHPMD\Rule\UnusedInstancePrivateField"
          externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedprivatefield">
        <description>
Detects when a private instance field is declared and/or assigned a value, but not used. 
Ignores unused private statics, which are a design feature in SilverStripe.
        </description>
        <priority>3</priority>
        <example>
<![CDATA[
class Something
{
    private $i = 5; // Unused
    private $j = 6;
    public function addOne()
    {
        return $this->j++;
    }
}
]]>
        </example>
    </rule>

</ruleset>